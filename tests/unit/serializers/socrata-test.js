import { moduleFor, test } from 'ember-qunit';
import startMirage from '../../helpers/setup-mirage-for-integration';

moduleFor('serializer:application', 'Unit | Serializer | socrata', {
  beforeEach() {
    startMirage(this.container);
  },
  afterEach() {
    window.server.shutdown();
  },
});

test('id is extracted', function(assert) {
  let serializer = this.subject();
  server.db.createCollection('test');
  let resource = server.db.test.insert({
    id: 'incorrect', 
    'model-name-id': 'incorrect',
    ModelNameId: 'incorrect',
    model_name_id: 'correct',
  });

  assert.equal(
    serializer.extractId({ modelName: 'model-name' }, resource),
    'correct',
    'The primary key in resources are identified as the underscored model name with "_id" appended'
  );
});

test('attributes are extracted', function(assert) {
  let serializer = this.subject();
  server.db.createCollection('test');
  let resource = server.db.test.insert({
    model_name_id: 'model_name_id',
    ends_with_id: 'ends_with_id',
    underscore_attribute: 'underscoreAttribute',
    word: 'word', 
  });

  assert.expect(4);
  let attrs = serializer._camelizeAttributes({ modelName: 'model-name' }, resource);
  for (key in attrs) {
    if (key !== 'id') {  // 'id' is autogenerated by Mirage, we don't want to test it.
      assert.equal(attrs[key], key)
    }
  }
});

test('key for relationship', function(assert) {
  let serializer = this.subject();

  assert.equal(
    serializer.keyForRelationship('relatedModelName'),
    'related_model_name_id',
    'Relationship keys in requests are the related model name with "_id" appended'
  );
});
